Felipe Santos Silva - 12221bcc042	
Caike Cesar Mota de Araújo - 12221bcc030

2 - a)

CREATE TABLE auditoria_salarios (
    cod_vend INT,
    salario_anterior NUMERIC(10,2),
    novo_salario NUMERIC(10,2),
    data_alteracao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER fn_auditoria_salario
AFTER UPDATE OF salfixo ON vendedor
FOR EACH ROW 
EXECUTE PROCEDURE fn_auditoria_salario()


CREATE OR REPLACE FUNCTION fn_auditoria_salario()
RETURNS TRIGGER AS $$ BEGIN
        INSERT INTO auditoria_salarios (cod_vend, salario_anterior, novo_salario)
        VALUES (OLD.codvend, OLD.salfixo, NEW.salfixo);
    	RETURN NULL;
END $$ language 'plpgsql';

SELECT * FROM auditoria_salarios

UPDATE vendedor
SET salfixo = 15000
WHERE codvend = 720

CREATE OR REPLACE PROCEDURE AumentaSalarios()
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE vendedor
    SET salfixo = CASE
        WHEN faixacomis = 'A' THEN salfixo * 1.05 
        WHEN faixacomis = 'B' THEN salfixo * 1.10 
        ELSE salfixo * 1.15 
    END;
END;
$$;

SELECT * FROM vendedor

11	"JOAO SANTOS OLIVEIRA"	"3196.9999999999995"	"C"
101	"JOAO SANTOS SILVA"	"3047.4999999999995"	"C"
111	"CARLOS VIEIRA"	"2614.5"	"A"
209	"JOSE FELISBERTO"	"2070"	"C"
213	"JONAS SILVA"	"2415"	"A"
240	"ANTONIO MORAIS"	"10925"	"C"
250	"MAURICIO SERRA"	"3223.0000000000005"	"B"
310	"JOSIAS DA SILVA"	"957.0000000000001"	"B"
100	"MARCOS FARIAS"	"919.9999999999999"	"D"
200	"MONICA DA SILVA"	"1839.9999999999998"	"D"
280	"SAMANTA DE OLIVEIRA"	"4140"	"C"
720	"FELIPE NASCIMENTO"	"15750"	"A"

CALL AumentaSalarios();

SELECT * FROM vendedor

11	"3197.00"	"3676.55"	"2025-04-04 16:36:06.878548"
101	"3047.50"	"3504.63"	"2025-04-04 16:36:06.878548"
111	"2614.50"	"2745.23"	"2025-04-04 16:36:06.878548"
209	"2070.00"	"2380.50"	"2025-04-04 16:36:06.878548"
213	"2415.00"	"2535.75"	"2025-04-04 16:36:06.878548"
240	"10925.00"	"12563.75"	"2025-04-04 16:36:06.878548"
250	"3223.00"	"3545.30"	"2025-04-04 16:36:06.878548"
310	"957.00"	"1052.70"	"2025-04-04 16:36:06.878548"
100	"920.00"	"1058.00"	"2025-04-04 16:36:06.878548"
200	"1840.00"	"2116.00"	"2025-04-04 16:36:06.878548"
280	"4140.00"	"4761.00"	"2025-04-04 16:36:06.878548"
720	"15750.00"	"16537.50"	"2025-04-04 16:36:06.878548"

SELECT * FROM auditoria_salarios

11	"3197.00"	"3676.55"	"2025-04-04 16:36:06.878548"
101	"3047.50"	"3504.63"	"2025-04-04 16:36:06.878548"
111	"2614.50"	"2745.23"	"2025-04-04 16:36:06.878548"
209	"2070.00"	"2380.50"	"2025-04-04 16:36:06.878548"
213	"2415.00"	"2535.75"	"2025-04-04 16:36:06.878548"
240	"10925.00"	"12563.75"	"2025-04-04 16:36:06.878548"
250	"3223.00"	"3545.30"	"2025-04-04 16:36:06.878548"
310	"957.00"	"1052.70"	"2025-04-04 16:36:06.878548"
100	"920.00"	"1058.00"	"2025-04-04 16:36:06.878548"
200	"1840.00"	"2116.00"	"2025-04-04 16:36:06.878548"
280	"4140.00"	"4761.00"	"2025-04-04 16:36:06.878548"
720	"15750.00"	"16537.50"	"2025-04-04 16:36:06.878548"

2 - B)

ALTER TABLE pedido ADD COLUMN qtd_itens INT DEFAULT 0;

CREATE OR REPLACE PROCEDURE atualizar_qtd_itens()
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE pedido
    SET qtd_itens = (
        SELECT COUNT(*) FROM itempedido i
        WHERE i.numped = pedido.numped
    );
END;
$$;

SELECT * FROM itemped WHERE numped = 300;

300	22	229
300	25	295
300	31	146
300	45	223
300	53	109
300	77	168

SELECT * FROM pedido

300	20	180	720	0

CALL atualizar_qtd_itens()

DELETE FROM itemped 
WHERE itemped.codprod = 25

INSERT INTO itemped VALUES (300, 2, 2);

 
SELECT * FROM produto 
SELECT * FROM itemped WHERE numped = 300;
SELECT * FROM pedido WHERE numped = 300;

c)

CREATE OR REPLACE FUNCTION func_validar_max_itens()
RETURNS TRIGGER AS $$
DECLARE
    v_total INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_total
    FROM ITEMPEDIDO
    WHERE NumPed = NEW.NumPed;

    IF (TG_OP = 'UPDATE') THEN
        v_total := v_total - 1;
    END IF;

    IF (v_total + 1 > 10) THEN
        RAISE EXCEPTION 'Um pedido não pode conter mais que 10 itens!';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trig_validar_max_itens
BEFORE INSERT OR UPDATE ON ITEMPEDIDO
FOR EACH ROW
EXECUTE FUNCTION func_validar_max_itens();

INSERT INTO PEDIDO (NumPed, PrazoEntr, CodCli, CodVend)
VALUES (8888, CURRENT_DATE + 5, 1, 1);

DO $$
DECLARE
    i INTEGER;
BEGIN
    FOR i IN 1..11 LOOP
        BEGIN
            INSERT INTO ITEMPEDIDO (NumPed, CodProd, Quant)
            VALUES (8888, (i % 5) + 1, 1);
            RAISE NOTICE 'Item % inserido com sucesso', i;
        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE 'Erro ao inserir item %: %', i, SQLERRM;
        END;
    END LOOP;
END $$;

SELECT COUNT(*) FROM ITEMPEDIDO WHERE NumPed = 8888;